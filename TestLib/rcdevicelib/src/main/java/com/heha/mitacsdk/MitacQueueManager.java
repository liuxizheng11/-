package com.heha.mitacsdk;

import android.bluetooth.BluetoothDevice;
import android.content.Context;
import android.os.Build;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import java.util.Timer;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;


/**
 * MitacQueueManager allow App control / request Qi data in queue, one action each, the result will be returned to corresponding callback
 * MitacQueueManager accept actions by "insert action", with action_id and action_payload
 * <p>
 * action data-> insertAction->onStartQueueProcess->processQueue->onFinishQueueProcess
 * <p>
 * sample :
 * wristbandmgr.insertAction(wristbandManager.WristbandFunc.WRISTBANDFUNC_SET_TIME, "{process_id:\"a001\",param:[\"" + datestr + "\",false,false],actionid:" + wristbandManager.WristbandFunc.WRISTBANDFUNC_SET_TIME.ordinal() + ",timeout:2}");
 * <p>
 * action_id : wristbandManager.WristbandFunc.WRISTBANDFUNC_SET_TIME
 * payload : "{delay:3,process_id:\"a001\",param:[\"" + datestr + "\",false,false],actionid:" + wristbandManager.WristbandFunc.WRISTBANDFUNC_SET_TIME.ordinal() + ",timeout:2}"
 * <p>
 * payload is the JSON text containing required information , wrong number of parameter, wrong json format ,  will issue onError
 * delay : number of seconds to wait before action is called
 * process_id : unique process id generated by app side, will be returned with the callback event
 * param: required parameters for different calls ,
 * actionid : same as previous action_id
 * timeout : number of seconds to wait until the following queued action is run
 * <p>
 * *Realtime Step data is not put into Queue, it can be start/stop instantly at any time, but it will be paused until all queue items are processed
 */


public class MitacQueueManager {


    public enum QiRealtimeStepStatus {
        /**
         * Not request Realtime Step
         */
        QI_REALTIME_STEP_STOP,
        /**
         * Getting Realtime Step
         */
        QI_REALTIME_STEP_POLLING,
        /**
         * Paused Realtime Step, wait until other action to finish
         */
        QI_REALTIME_STEP_PAUSE

    }

    private static MitacQueueManager instance;
    public static Context _context;
    // private  static Handler handler;
    JSONObject payloadOBJ;
    private MitacManager selectedManager;
    List<String> queue = new ArrayList<String>();
    private static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    int queueLimit = 100;
    int pendingTime = 0;
    WristbandFunc curActionID = null;
    Date startWatchTime;
    Timer actionTimer;
    MitacQueueManagerListener m_listener;
    QiRealtimeStepStatus realtime_step_status = QiRealtimeStepStatus.QI_REALTIME_STEP_STOP;
    String curProcessID;


    public enum WristbandFunc {
        /**
         * Dao not connected, normally should not happen because it will restart in scan mode
         */
        WRISTBANDFUNC_DISCONNECT,
        /**
         * Start Benchmark Timewatch
         */
        WRISTBANDFUNC_START_TIMEWATCH,
        /**
         * Stop benchmark timewatch, return the duration from WRISTBANDFUNC_START_TIMEWATCH
         */
        WRISTBANDFUNC_STOP_TIMEWATCH,
        /**
         * Start Scanning
         */
        WRISTBANDFUNC_START_SCAN,
        /**
         * Stop Scanning
         */
        WRISTBANDFUNC_STOP_SCAN,
        /**
         * Start Realtime Step count , if other action inserted, this will pause until all action in queue is finished
         */
        WRISTBANDFUNC_START_REALTIME_STEP_COUNT,
        /**
         * Stop realtime Step count immediately , not put to queue
         */
        WRISTBANDFUNC_STOP_REALTIME_STEP_COUNT,
        /**
         * Start Request Step history , need to wait for several seconds for data retrival
         */
        WRISTBANDFUNC_START_REQUEST_STEP_HISTORY,
        /**
         * Stop Step history data stream
         */
        WRISTBANDFUNC_STOP_REQUEST_STEP_HISTORY,
        /**
         * Start Request Sleep history , need to wait for several seconds for data retrival
         */
        WRISTBANDFUNC_START_REQUEST_SLEEP_HISTORY,
        /**
         * Stop sleep history data stream
         */
        WRISTBANDFUNC_STOP_REQUEST_SLEEP_HISTORY,
        /**
         * Start  EKG data
         * <p>
         * startCPCEkg(int age, MitacCPCEKG.TrainingType type, long timeout
         * param[0] EKG Mode : 0=CPC 1=EKG
         * <p>
         * if ekg mode = 0
         * param[1] (int) age
         * param[2] (int) MitacCPCEKG.TrainingType
         * <p>
         * if ekg mode = 1
         * param[1] (int) age
         */
        WRISTBANDFUNC_START_EKG,

        WRISTBANDFUNC_START_CPC,
        WRISTBANDFUNC_START_HRV,
        /**
         * Stop EKG data
         */
        WRISTBANDFUNC_STOP_EKG,
        /**
         * Get OTA mode , if ota mode is true, must push firmware make Qi to normal ASAP
         */
        WRISTBANDFUNC_GET_OTA_MODE,
        /**
         * Goto Sleep analysis mode
         */
        WRISTBANDFUNC_START_SLEEP_MODE,
        /**
         * Erase ALL Sleep and Step data , use with caution
         */
        WRISTBANDFUNC_ERASE_HISTORY_DATA,
        /**
         * Get Sleep mode, but only valid in normal mode...
         */
        WRISTBANDFUNC_GET_SLEEP_MODE,
        /**
         * Get Factory internal serial No.
         */
        WRISTBANDFUNC_GET_FACTORY_UUID,
        /**
         * Get Mac Address of Qi
         */
        WRISTBANDFUNC_GET_MAC_ADDRESS,
        /**
         * Get Firmware Version
         */
        WRISTBANDFUNC_GET_FIRMWARE_VERSION,
        /**
         * Get Distance unit
         */
        WRISTBANDFUNC_GET_DISTANCE_UNIT,
        /**
         * Set Distance unit
         * <p>
         * param[0] DISTANCE_UNIT
         */
        WRISTBANDFUNC_SET_DISTANCE_UNIT,
        /**
         * Set User Profile
         * <p>
         * param[0] (Bool)isMale
         * param[1] (int)age
         * param[2] (int)height
         * param[3] (double)weight
         */
        WRISTBANDFUNC_SET_PROFILE,
        /**
         * Get User Profile
         */
        WRISTBANDFUNC_GET_PROFILE,
        /**
         * Get Battery level
         */
        WRISTBANDFUNC_GET_BATTERY_LEVEL,
        /**
         * Get Alarm
         */
        WRISTBANDFUNC_GET_ALARM,
        /**
         * Set Alarm
         * <p>
         * param[0] (boolean)iswakeupAlarm , true = wakeup alarm, false = remind to sleep
         * param[1] (boolean)weekdayNapAlarmEnabled
         * param[2] (int)weekdayNapAlarmHour
         * param[3] (int)weekdayNapAlarmMinute
         * param[4] (boolean)weekdayAlarmEnabled
         * param[5] (int)weekdayAlarmHour
         * param[6] (int)weekdayAlarmMinute
         * param[7] (boolean)weekendNapAlarmEnabled
         * param[8] (int)weekendNapAlarmHour
         * param[9] (int)weekendNapAlarmMinute
         * param[10] (boolean)weekendAlarmEnabled
         * param[11] (int)weekendAlarmMinute
         * param[12] (int)weekendAlarmHour
         */
        WRISTBANDFUNC_SET_ALARM,
        /**
         * Set Target goal, DAO will get Alarm when target steps/activity hour/Calories is fullfilled
         * <p>
         * param[0] (int)activitytime
         * param[1] (int)step
         * param[2] (int)distance
         * param[3] (int)calories
         */
        WRISTBANDFUNC_SET_GOAL,
        /**
         * Get Target goal, DAO will get Alarm when target steps/activity hour/Calories is fullfilled
         */
        WRISTBANDFUNC_GET_GOAL,


        WRISTBANDFUNC_GET_SERIAL_NO,
        /**
         * Set Dao Time
         * <p>
         * param[0] (String)Date, generated from SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
         * param[1] (boolean)is12HrMode
         * param[2] (boolean)isResetStepCount
         */
        WRISTBANDFUNC_SET_TIME,
        /**
         * Get Dao Time
         */
        WRISTBANDFUNC_GET_TIME,
        /**
         * Start OTA mode ( firmware update mode ), non-reversible , need to upload the firmware to resume to normal mode
         */
        WRISTBANDFUNC_START_OTA,

        WRISTBANDFUNC_GET_STEP_MEASURE_MODE,
        WRISTBANDFUNC_SET_STEP_MEASURE_MODE
    }

    /**
     * @return Support of the OS
     */
    public static boolean isOsSupport() {
        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;
    }

    /**
     * @return Version of the SDK
     */
    public static final String getSDKVersion() {
        return MitacManager.getSDKVersion();
    }

    public void connect(BluetoothDevice device) {
        if (selectedManager != null && device != null) {
            selectedManager.connect(device.getAddress());
        }
    }


    /**
     * Start Scanning for Qi
     *
     * @param timeout number of seconds for scanning, 0 = forever scanning
     */
    public void startScan(int timeout) {
        selectedManager.startScan(timeout);
    }

    /**
     * Get Status of the Qi , return action current doing
     *
     * @return action id
     */
    public MitacEventListener.QiStatus getStatus() {

        return selectedManager.getStatus();
    }

    public void setQueueLimit(int limit) {
        queueLimit = limit;
    }

    /**
     * Stop Scanning for Qi
     */
    public void stopScan() {
        selectedManager.stopScan();
    }


    /**
     * Singleteon for getting queue manager
     *
     * @param context context
     * @return mitacqueuemanager
     */
    public static MitacQueueManager getInstance(Context context) {

        _context = context;

        if (instance == null) {
            instance = new MitacQueueManager();

            //      handler = new Handler(context.getMainLooper());

        }
        return instance;
    }

    public void addEventListener(MitacQueueManagerListener listener) {
        m_listener = listener;
    }


    public boolean initFirmwareUpdate(String filepath) {
        return selectedManager.initFirmwareUpdate(filepath);
    }

    public boolean isInterruptTask(WristbandFunc actionid) {
        switch (actionid) {
            case WRISTBANDFUNC_DISCONNECT:


                return true;
            case WRISTBANDFUNC_START_SCAN:
                return false;
            case WRISTBANDFUNC_STOP_SCAN:
                return true;
            default:
                return false;
        }
    }


    public boolean isRealtimeTask(WristbandFunc actionid) {

        if (actionid == null) {
            return false;
        }

        switch (actionid) {
            case WRISTBANDFUNC_START_REALTIME_STEP_COUNT:
                return true;

            default:
                return false;
        }
    }

    public void connectDevice(String macaddress) {
        selectedManager.connect(macaddress);
    }

    public boolean isDataStreamTask(WristbandFunc actionid) {
        return false;
    }

    /* TODO: port this to android
    - (void)initFirmwareUpdateWithFile:(NSString *)filename{
        [selectedManager initFirmwareUpdateWithFile:filename];
    }
    */


    public void startTimer() {

        scheduler.scheduleAtFixedRate(new Runnable() {
            @Override
            public void run() {


                //  Log.e("ble","status:"+selectedManager.getStatus()+" pending:"+pendingTime+" actionid:"+curActionID);


                if (selectedManager == null) {
                    Log.e("ble", "BLE manager not ready");
                    return;
                }


                if (curActionID == null) {
                    popQueue();
                }


                if (selectedManager.getStatus().equals(MitacEventListener.QiStatus.QI_STATUS_ONHANDSHAKE)) {
                    Log.w("ble", "still handshaking");
                    return;
                }


                if (queue.size() == 0) {
                    if (realtime_step_status == QiRealtimeStepStatus.QI_REALTIME_STEP_PAUSE) {
                        selectedManager.startRealtimeStepCount();
                        realtime_step_status = QiRealtimeStepStatus.QI_REALTIME_STEP_POLLING;
                    }
                } else {
                    if (realtime_step_status == QiRealtimeStepStatus.QI_REALTIME_STEP_POLLING) {
                        realtime_step_status = QiRealtimeStepStatus.QI_REALTIME_STEP_PAUSE;
                        selectedManager.stopRealtimeStepCount();
                    }
                }

                //     Log.e("ble", "timer: queue:"+queue.size()+" status:"+selectedManager.getStatus()+" pending:"+pendingTime);

                if (pendingTime > 0 && !selectedManager.getStatus().equals(MitacEventListener.QiStatus.QI_STATUS_READY) && !isRealtimeTask(curActionID)) {

                    pendingTime--;
                } else if (pendingTime == 0 && (selectedManager.getStatus().equals(MitacEventListener.QiStatus.QI_STATUS_READY) && queue.size() > 0)) {

                    //if (selectedManager.getStatus().equals(MitacEventListener.QiStatus.QI_STATUS_READY))
                    //  Log.i("ble", "qi ready, process queue");

                    //if (pendingTime == 0)
                    //   Log.i("ble", "event timeout");

                    // if (isRealtimeTask(curActionID)) {
                    //  Log.i("ble", "realtime task timeout");
                    resetCurID();
                    popQueue();
                    //}
                } else {

                    // timeout currect action
                    if (pendingTime == 0 && (!selectedManager.getStatus().equals(MitacEventListener.QiStatus.QI_STATUS_READY))) {
                        if (!selectedManager.getStatus().equals(MitacEventListener.QiStatus.QI_STATUS_START_CPC_EKG) &&
                                !selectedManager.getStatus().equals(MitacEventListener.QiStatus.QI_STATUS_START_HRV_EKG)
                                ) {
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                        }
                        popQueue();

                    }
                    // pending time < 0  = no job done
                }
            }
        }, 2000, 1000, TimeUnit.MILLISECONDS);


    }

    public void pauseTimer() {
// do not remove
    }

    public void resumeTimer() {
// do not remove
    }

    /**
     * See above for explaination
     *
     * @param actionid see above for explaination
     * @param payload  see above for explaination
     * @return if there's problem in payload, will return false
     */


    public boolean insertAction(WristbandFunc actionid, String payload) {


        if (selectedManager == null) {
            m_listener.onError(selectedManager.getStatus(), MitacEventListener.MitacError.MITACERROR_BLUETOOTH_NOTCONNECTED);
            return false;
        }


        if (actionid != WristbandFunc.WRISTBANDFUNC_START_REALTIME_STEP_COUNT && actionid != WristbandFunc.WRISTBANDFUNC_STOP_REALTIME_STEP_COUNT) {

            if (curActionID == WristbandFunc.WRISTBANDFUNC_STOP_REALTIME_STEP_COUNT) {
                m_listener.onFinishQueueProcess("", curActionID);
            }

            if (realtime_step_status == QiRealtimeStepStatus.QI_REALTIME_STEP_POLLING) {
                selectedManager.stopRealtimeStepCount();
            }


        }


        if (queue.size() < queueLimit) {


            switch (actionid) {

                case WRISTBANDFUNC_START_TIMEWATCH:

                    break;
                case WRISTBANDFUNC_STOP_TIMEWATCH:
                    break;
                case WRISTBANDFUNC_START_SCAN:
                    selectedManager.startScan(0);
                    m_listener.onStartQueueProcess("", WristbandFunc.WRISTBANDFUNC_START_SCAN);
                    m_listener.onFinishQueueProcess("", WristbandFunc.WRISTBANDFUNC_START_SCAN);
                    return true;
                //break;
                case WRISTBANDFUNC_STOP_SCAN:
                    selectedManager.stopScan();
                    m_listener.onStartQueueProcess("", WristbandFunc.WRISTBANDFUNC_STOP_SCAN);
                    m_listener.onFinishQueueProcess("", WristbandFunc.WRISTBANDFUNC_STOP_SCAN);
                    return true;
                //break;
                case WRISTBANDFUNC_START_REALTIME_STEP_COUNT:


                    try {


                        JSONObject obj = new JSONObject(payload);


                        curActionID = WristbandFunc.values()[obj.getInt("actionid")];


                        try {
                            curProcessID = obj.getString("process_id");
                        } catch (JSONException exception) {
                            curProcessID = "";

                        }
                    } catch (JSONException exception) {
                        curProcessID = "";
                        curActionID = WristbandFunc.WRISTBANDFUNC_START_REALTIME_STEP_COUNT;
                    }


                    if (queue.size() == 0 && selectedManager.getStatus() == MitacEventListener.QiStatus.QI_STATUS_READY) {
                        selectedManager.startRealtimeStepCount();
                        m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_REALTIME_STEP_COUNT);
                        m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_REALTIME_STEP_COUNT);
                        realtime_step_status = QiRealtimeStepStatus.QI_REALTIME_STEP_POLLING;
                    } else {
                        selectedManager.stopRealtimeStepCount();
                        m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_STOP_REALTIME_STEP_COUNT);
                        m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_STOP_REALTIME_STEP_COUNT);
                        realtime_step_status = QiRealtimeStepStatus.QI_REALTIME_STEP_PAUSE;
                    }
                    return true;

                case WRISTBANDFUNC_STOP_REALTIME_STEP_COUNT:
                    selectedManager.stopRealtimeStepCount();
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_STOP_REALTIME_STEP_COUNT);
                    m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_STOP_REALTIME_STEP_COUNT);
                    realtime_step_status = QiRealtimeStepStatus.QI_REALTIME_STEP_STOP;
                    resumeTimer();
                    resetCurID();
                    popQueue();
                    return true;
                case WRISTBANDFUNC_START_REQUEST_STEP_HISTORY:
                    break;
                case WRISTBANDFUNC_STOP_REQUEST_STEP_HISTORY:
                    break;
                case WRISTBANDFUNC_START_REQUEST_SLEEP_HISTORY:
                    break;
                case WRISTBANDFUNC_STOP_REQUEST_SLEEP_HISTORY:
                    break;
                case WRISTBANDFUNC_START_EKG:

                    try {
                        JSONObject obj = new JSONObject(payload);

                        if (obj.getJSONArray("param").length() != 3) {
                            m_listener.onError(MitacEventListener.QiStatus.QI_STATUS_START_EKG_MEASURE, MitacEventListener.MitacError.MITACERROR_CHAR_DATA_FORMAT);
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            curActionID = null;
                            popQueue();
                            return false;
                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        m_listener.onError(MitacEventListener.QiStatus.QI_STATUS_START_EKG_MEASURE, MitacEventListener.MitacError.MITACERROR_CHAR_DATA_FORMAT);
                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                        curActionID = null;
                        popQueue();
                        return false;
                    }

                    break;
                case WRISTBANDFUNC_STOP_EKG: {
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_STOP_EKG);
                    selectedManager.stopEKG();

                    m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_STOP_EKG);
                    selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);

                    resumeTimer();
                    resetCurID();
                    popQueue();

                    return true;
                }
                case WRISTBANDFUNC_DISCONNECT: {
                    m_listener.onStartQueueProcess("", WristbandFunc.WRISTBANDFUNC_DISCONNECT);
                    selectedManager.disconnect();

                }
                break;

                case WRISTBANDFUNC_GET_OTA_MODE:
                    break;
                case WRISTBANDFUNC_START_SLEEP_MODE:
                    break;
                case WRISTBANDFUNC_ERASE_HISTORY_DATA:
                    break;
                case WRISTBANDFUNC_GET_SLEEP_MODE:
                    break;
                case WRISTBANDFUNC_GET_FACTORY_UUID:
                    break;
                case WRISTBANDFUNC_GET_MAC_ADDRESS:
                    break;

                case WRISTBANDFUNC_GET_FIRMWARE_VERSION:
                    break;
                case WRISTBANDFUNC_GET_DISTANCE_UNIT:
                    break;
                case WRISTBANDFUNC_SET_DISTANCE_UNIT:
                    try {
                        JSONObject obj = new JSONObject(payload);
                        if (obj.getJSONArray("param").length() != 1) {
                            m_listener.onError(MitacEventListener.QiStatus.QI_STATUS_SET_DISTANCE_UNIT, MitacEventListener.MitacError.MITACERROR_CHAR_DATA_FORMAT);
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();


                            return false;
                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        return false;
                    }
                    break;
                case WRISTBANDFUNC_SET_PROFILE:
                    try {
                        JSONObject obj = new JSONObject(payload);
                        if (obj.getJSONArray("param").length() != 4) {
                            m_listener.onError(MitacEventListener.QiStatus.QI_STATUS_SET_PROFILE, MitacEventListener.MitacError.MITACERROR_CHAR_DATA_FORMAT);
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                        resetCurID();
                        popQueue();

                        return false;
                    }
                    break;
                case WRISTBANDFUNC_GET_PROFILE:
                    break;
                case WRISTBANDFUNC_GET_BATTERY_LEVEL:
                    break;
                case WRISTBANDFUNC_GET_ALARM:

                    try {
                        JSONObject obj = new JSONObject(payload);
                        if (obj.getJSONArray("param").length() != 1) {
                            m_listener.onError(MitacEventListener.QiStatus.QI_STATUS_GET_ALARM, MitacEventListener.MitacError.MITACERROR_CHAR_DATA_FORMAT);
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                        resetCurID();
                        popQueue();
                        return false;
                    }
                    break;
                case WRISTBANDFUNC_SET_ALARM:
                    try {
                        JSONObject obj = new JSONObject(payload);
                        if (obj.getJSONArray("param").length() != 13) {
                            m_listener.onError(MitacEventListener.QiStatus.QI_STATUS_SET_ALARM, MitacEventListener.MitacError.MITACERROR_CHAR_DATA_FORMAT);
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        return false;
                    }
                    break;
                case WRISTBANDFUNC_SET_GOAL:
                    try {
                        JSONObject obj = new JSONObject(payload);
                        if (obj.getJSONArray("param").length() != 4) {
                            m_listener.onError(MitacEventListener.QiStatus.QI_STATUS_SET_GOAL, MitacEventListener.MitacError.MITACERROR_CHAR_DATA_FORMAT);
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        return false;
                    }
                    break;
                case WRISTBANDFUNC_GET_GOAL:

                    break;
/*                case WRISTBANDFUNC_SET_SERIAL_NO:
                    try {
                        JSONObject obj = new JSONObject(payload);
                        if (obj.getJSONArray("param").length() != 1) {
                            m_listener.onError(selectedManager.getStatus(), MitacEventListener.MitacError.MITACERROR_CHAR_DATA_FORMAT);
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        return false;
                    }
                    break;
                    */
                case WRISTBANDFUNC_GET_SERIAL_NO:
                    break;
                case WRISTBANDFUNC_SET_TIME:
                    try {
                        JSONObject obj = new JSONObject(payload);
                        if (obj.getJSONArray("param").length() != 3) {
                            m_listener.onError(MitacEventListener.QiStatus.QI_STATUS_SET_DATE, MitacEventListener.MitacError.MITACERROR_CHAR_DATA_FORMAT);
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                        resetCurID();
                        popQueue();
                        return false;
                    }
                    break;
                case WRISTBANDFUNC_GET_TIME:
                    break;
                case WRISTBANDFUNC_START_OTA:
                    break;

                case WRISTBANDFUNC_GET_STEP_MEASURE_MODE:
                    break;
                case WRISTBANDFUNC_SET_STEP_MEASURE_MODE:
                    try {
                        JSONObject obj = new JSONObject(payload);
                        if (obj.getJSONArray("param").length() != 1) {
                            m_listener.onError(MitacEventListener.QiStatus.QI_STATUS_SET_STEP_MEASURE_MODE, MitacEventListener.MitacError.MITACERROR_SET_STEP_MEASURE_MODE);
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                        resetCurID();
                        popQueue();
                        return false;
                    }
                    break;
            }
            queue.add(payload);
        } else {
            // queue too long
            m_listener.onError(selectedManager.getStatus(), MitacEventListener.MitacError.MITACERROR_EXCEED_QUEUE_LIMIT);
        }

        return true;
    }


    private void resetCurID() {
        pendingTime = 0;
        curActionID = null;
        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
    }

    public void disconnect() {
        selectedManager.disconnect();
    }

    private boolean popQueue() {


        if (queue.size() == 0) {
            //  Log.i("ble", "queue empty");
            return false;
        }


        String payload = queue.get(0);
        // Log.i("ble", "payload:" + payload);
        queue.remove(0);

        try {


            JSONObject obj = new JSONObject(payload);

            try {
                pendingTime = obj.getInt("timeout");
            } catch (JSONException exception) {
                pendingTime = 100;
            }

            if (pendingTime == 0) {
                pendingTime = 100;
            }

            curActionID = WristbandFunc.values()[obj.getInt("actionid")];


            int delay;
            try {
                delay = obj.getInt("delay") * 1000;
            } catch (JSONException exception) {
                delay = 100;
            }


            try {
                curProcessID = obj.getString("process_id");
            } catch (JSONException exception) {
                curProcessID = "";
            }


//            if (curActionID.equals(WristbandFunc.WRISTBANDFUNC_START_EKG))
//                selectedManager.stopEKGMeasure();

            // if (curActionID.equals(WristbandFunc.WRISTBANDFUNC_START_REALTIME_STEP_COUNT))
            //     selectedManager.stopRealtimeStepCount();

            switch (curActionID) {
                case WRISTBANDFUNC_DISCONNECT:


                    break;
                case WRISTBANDFUNC_START_TIMEWATCH:
                    startWatchTime = new Date();
                    popQueue();
                    break;
                case WRISTBANDFUNC_STOP_TIMEWATCH:
                    double timestamp = new Date().getTime() / 1000.0;
                    Log.i("ble", "Total runtime:" + (timestamp - startWatchTime.getTime() / 1000.0));
                    popQueue();
                    break;
                case WRISTBANDFUNC_START_SCAN:

                    break;
                case WRISTBANDFUNC_STOP_SCAN:

                    selectedManager.stopScan();
                    break;
                case WRISTBANDFUNC_START_REALTIME_STEP_COUNT:

                    break;
                case WRISTBANDFUNC_START_REQUEST_STEP_HISTORY:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_REQUEST_STEP_HISTORY);
                    pauseTimer();

                    if (delay < 2000) {
                        delay = 2000;
                    }

                    scheduler.schedule(new Runnable() {
                        public void run() {
                            selectedManager.startGet7daysStep();
                            resumeTimer();

                        }
                    }, delay, TimeUnit.MILLISECONDS);


                    break;
                case WRISTBANDFUNC_STOP_REQUEST_STEP_HISTORY:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_STOP_REQUEST_STEP_HISTORY);
                    m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_STOP_REQUEST_STEP_HISTORY);

                    scheduler.schedule(new Runnable() {
                        public void run() {
                            selectedManager.stopGet7daysStep();
                            resumeTimer();

                        }
                    }, delay, TimeUnit.MILLISECONDS);


                    break;
                case WRISTBANDFUNC_START_REQUEST_SLEEP_HISTORY:

                    if (delay < 2000) {
                        delay = 2000;
                    }
                    pauseTimer();
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_REQUEST_SLEEP_HISTORY);
                    scheduler.schedule(new Runnable() {
                        public void run() {
                            // selectedManager.disconnect();
                            selectedManager.startSleepData();
                            resumeTimer();

                            //    m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_REQUEST_SLEEP_HISTORY);
                        }
                    }, delay, TimeUnit.MILLISECONDS);


                    break;
                case WRISTBANDFUNC_STOP_REQUEST_SLEEP_HISTORY:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_STOP_REQUEST_SLEEP_HISTORY);
                    m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_STOP_REQUEST_SLEEP_HISTORY);
                    scheduler.schedule(new Runnable() {
                        public void run() {
                            selectedManager.stopSleepData();
                            resumeTimer();

                        }
                    }, delay, TimeUnit.MILLISECONDS);


                    break;

                case WRISTBANDFUNC_START_EKG:


                    try {
                        JSONObject obj2 = new JSONObject(payload);
                        final JSONArray arr = obj2.getJSONArray("param");
                        final int timeout = obj2.getInt("timeout") * 1000;

                        if (arr.length() != 3) {
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        } else {


                            if (arr.getInt(0) == MitacAttributes.EEKG_TYPE.EKG_RUNMETHOD_CPC) {
                                m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_CPC);
                                selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_START_CPC_EKG);
                                scheduler.schedule(new Runnable() {
                                    public void run() {
                                        try {
                                            selectedManager.startCPCEkg(arr.getInt(1), MitacCPCEKG.TrainingType.values()[arr.getInt(2)], timeout);

                                            resumeTimer();
                                        } catch (JSONException exception) {
                                            exception.printStackTrace();
//                                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                        }
//                                        m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_CPC);
                                    }
                                }, delay, TimeUnit.MILLISECONDS);

//                                handler.postDelayed(new Runnable() {
//                                    @Override
//                                    public void run() {
//                                        try {
//                                            selectedManager.startCPCEkg(arr.getInt(1), MitacCPCEKG.TrainingType.values()[arr.getInt(2)], timeout);
//                                            m_listener.onStartQueueProcess(curProcessID,curActionID);
//                                            resumeTimer();
//                                        } catch (JSONException exception) {
//exception.printStackTrace();
//                                        }
//                                    }
//                                }, delay);


                            } else if (arr.getInt(0) == MitacAttributes.EEKG_TYPE.EKG_RUNMETHOD_HR) {
                                m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_HRV);
                                selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_START_HRV_EKG);
                                scheduler.schedule(new Runnable() {
                                    public void run() {
                                        try {

                                            selectedManager.startHRVEkg(arr.getInt(1), timeout);
                                            //  m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_HRV);

                                            resumeTimer();
                                        } catch (JSONException exception) {
                                            exception.printStackTrace();
                                        }
                                    }
                                }, delay, TimeUnit.MILLISECONDS);

//                                handler.postDelayed(new Runnable() {
//                                    @Override
//                                    public void run() {
//                                        try {
//
//                                            selectedManager.startHRVEkg(arr.getInt(1), timeout);
//                                            m_listener.onStartQueueProcess(curProcessID,curActionID);
//
//                                            resumeTimer();
//                                        } catch (JSONException exception) {
//                                            exception.printStackTrace();
//                                        }
//                                    }
//                                }, delay);

                            }
                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                        resetCurID();
                        popQueue();
                        return false;
                    }

                    break;
                case WRISTBANDFUNC_STOP_EKG:

                    break;

                case WRISTBANDFUNC_GET_OTA_MODE:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_OTA_MODE);
                    scheduler.schedule(new Runnable() {
                        public void run() {
                            selectedManager.getOTAMode();

                            resumeTimer();
                        }
                    }, delay, TimeUnit.MILLISECONDS);

//                    handler.postDelayed(new Runnable() {
//                        @Override
//                        public void run() {
//                            selectedManager.getFirmwareMode();
//                            m_listener.onStartQueueProcess(curProcessID, curActionID);
//                            resumeTimer();
//                        }
//                    }, delay);


                    break;
                case WRISTBANDFUNC_START_SLEEP_MODE:
                    selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                    resetCurID();
                    popQueue();
                    break;
                case WRISTBANDFUNC_ERASE_HISTORY_DATA:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_ERASE_HISTORY_DATA);
                    scheduler.schedule(new Runnable() {
                        public void run() {
                            selectedManager.emptyFlashData();

                            resumeTimer();
                        }
                    }, delay, TimeUnit.MILLISECONDS);

//                    handler.postDelayed(new Runnable() {
//                        @Override
//                        public void run() {
//                            selectedManager.emptyFlashData();
//                            m_listener.onStartQueueProcess(curProcessID,curActionID);
//                            resumeTimer();
//                        }
//                    }, delay);


                    break;
                case WRISTBANDFUNC_GET_SLEEP_MODE:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_SLEEP_MODE);
                    scheduler.schedule(new Runnable() {
                        public void run() {
                            selectedManager.getSleepStatus();

                            resumeTimer();
                        }
                    }, delay, TimeUnit.MILLISECONDS);


                    break;


                case WRISTBANDFUNC_GET_STEP_MEASURE_MODE:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_STEP_MEASURE_MODE);
                    scheduler.schedule(new Runnable() {
                        public void run() {
                            selectedManager.getStepMeasureMode();

                            resumeTimer();
                        }
                    }, delay, TimeUnit.MILLISECONDS);


                    break;


                case WRISTBANDFUNC_SET_STEP_MEASURE_MODE:

                    try {
                        final JSONObject obj2 = new JSONObject(payload);
                        if (obj2.getJSONArray("param").length() != 1) {
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        } else {
                            m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_SET_STEP_MEASURE_MODE);
                            scheduler.schedule(new Runnable() {
                                public void run() {
                                    try {
                                        selectedManager.setStepMeasureMode(obj2.getJSONArray("param").getBoolean(0));


                                    } catch (JSONException exception) {
                                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                        resetCurID();
                                        popQueue();
                                    }
                                    resumeTimer();
                                }
                            }, delay, TimeUnit.MILLISECONDS);


                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                        resetCurID();
                        popQueue();
                        return false;
                    }

                    break;

                case WRISTBANDFUNC_GET_FACTORY_UUID:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_FACTORY_UUID);
                    selectedManager.getFactoryUUID();
                    resetCurID();
                    popQueue();
                    break;
                case WRISTBANDFUNC_GET_MAC_ADDRESS:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_MAC_ADDRESS);
                    scheduler.schedule(new Runnable() {
                        public void run() {
                            selectedManager.getMacAddress();

                            resumeTimer();
                        }
                    }, delay, TimeUnit.MILLISECONDS);

//                    handler.postDelayed(new Runnable() {
//                        @Override
//                        public void run() {
//                            selectedManager.getMacAddress();
//                            m_listener.onStartQueueProcess(curProcessID,curActionID);
//                            resumeTimer();
//                        }
//                    }, delay);


                    break;

                case WRISTBANDFUNC_GET_FIRMWARE_VERSION:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_FIRMWARE_VERSION);
                    scheduler.schedule(new Runnable() {
                        public void run() {
                            selectedManager.getFirmwareVersion();

                            resumeTimer();
                        }
                    }, delay, TimeUnit.MILLISECONDS);


                    break;
                case WRISTBANDFUNC_GET_DISTANCE_UNIT:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_DISTANCE_UNIT);
                    scheduler.schedule(new Runnable() {
                        public void run() {
                            selectedManager.getDistanceUnit();
                            resumeTimer();
                        }
                    }, delay, TimeUnit.MILLISECONDS);


                    break;
                case WRISTBANDFUNC_SET_DISTANCE_UNIT:
                    try {
                        final JSONObject obj2 = new JSONObject(payload);
                        if (obj2.getJSONArray("param").length() != 1) {
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        } else {
                            m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_SET_DISTANCE_UNIT);
                            scheduler.schedule(new Runnable() {
                                public void run() {
                                    try {
                                        selectedManager.SetDistanceUnit(MitacManager.DISTANCE_UNIT.values()[obj2.getJSONArray("param").getInt(0)]);


                                    } catch (JSONException exception) {
                                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                        resetCurID();
                                        popQueue();
                                    }
                                    resumeTimer();
                                }
                            }, delay, TimeUnit.MILLISECONDS);


                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        return false;
                    }
                    break;
                case WRISTBANDFUNC_SET_PROFILE:
                    try {
                        JSONObject obj2 = new JSONObject(payload);
                        final JSONArray arr = obj2.getJSONArray("param");
                        if (arr.length() != 4) {
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        } else {
                            m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_SET_PROFILE);
                            scheduler.schedule(new Runnable() {
                                public void run() {
                                    try {


                                        MitacManager.userProfile profile = new MitacManager.userProfile();
                                        profile.isMale = arr.getBoolean(0);
                                        profile.age = arr.getInt(1);
                                        profile.height = arr.getInt(2);
                                        profile.weight = (float) arr.getDouble(3);

                                        if (!selectedManager.setProfile(profile)) {
                                            m_listener.onError(MitacEventListener.QiStatus.QI_STATUS_SET_PROFILE, MitacEventListener.MitacError.MITACERROR_CHAR_DATA_FORMAT);
                                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                            curActionID = null;

                                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                            resetCurID();
                                            popQueue();
                                        }
                                    } catch (JSONException e) {
                                        e.printStackTrace();
                                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                        resetCurID();
                                        popQueue();
                                    }
                                    resumeTimer();
                                }
                            }, delay, TimeUnit.MILLISECONDS);


                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        return false;
                    }
                    break;
                case WRISTBANDFUNC_GET_PROFILE:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_PROFILE);
                    scheduler.schedule(new Runnable() {
                        public void run() {
                            selectedManager.getProfile();
                            resumeTimer();
                        }
                    }, delay, TimeUnit.MILLISECONDS);


                    break;
                case WRISTBANDFUNC_GET_BATTERY_LEVEL:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_BATTERY_LEVEL);
                    scheduler.schedule(new Runnable() {
                        public void run() {
                            selectedManager.getBatteryLevel();

                            resumeTimer();
                        }
                    }, delay, TimeUnit.MILLISECONDS);

//                    handler.postDelayed(new Runnable() {
//                        @Override
//                        public void run() {
//                            selectedManager.getBatteryLevel();
//                            m_listener.onStartQueueProcess(curProcessID,curActionID);
//                            resumeTimer();
//                        }
//                    }, delay);


                    break;
                case WRISTBANDFUNC_GET_ALARM:

                    try {
                        final JSONObject obj2 = new JSONObject(payload);
                        if (obj2.getJSONArray("param").length() != 1) {
                            Log.i("ble", "param:" + obj2.getJSONArray("param").length());
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        } else {
                            m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_ALARM);
                            scheduler.schedule(new Runnable() {
                                public void run() {
                                    try {
                                        selectedManager.getAlarm(obj2.getJSONArray("param").getBoolean(0));
                                    } catch (JSONException exception) {
                                        exception.printStackTrace();
                                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                        resetCurID();
                                        popQueue();
                                    }
                                    resumeTimer();

                                }
                            }, delay, TimeUnit.MILLISECONDS);

                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        return false;
                    }
                    break;
                case WRISTBANDFUNC_SET_ALARM:
                    try {
                        JSONObject obj2 = new JSONObject(payload);
                        final JSONArray arr = obj2.getJSONArray("param");
                        if (arr.length() != 13) {
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        } else {
                            m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_SET_ALARM);
                            scheduler.schedule(new Runnable() {
                                public void run() {
                                    try {
                                        boolean isWakeupAlarm = arr.getBoolean(0);
                                        MitacManager.AlarmSetting setting = new MitacManager.AlarmSetting();
                                        setting.weekdayNapAlarmEnabled = arr.getBoolean(1);
                                        setting.weekdayNapAlarmHour = arr.getInt(2);
                                        setting.weekdayNapAlarmMinute = arr.getInt(3);
                                        setting.weekdayAlarmEnabled = arr.getBoolean(4);
                                        setting.weekdayAlarmHour = arr.getInt(5);
                                        setting.weekdayAlarmMinute = arr.getInt(6);
                                        setting.weekendNapAlarmEnabled = arr.getBoolean(7);
                                        setting.weekendNapAlarmHour = arr.getInt(8);
                                        setting.weekendNapAlarmMinute = arr.getInt(9);
                                        setting.weekendAlarmEnabled = arr.getBoolean(10);
                                        setting.weekendAlarmHour = arr.getInt(11);
                                        setting.weekendAlarmMinute = arr.getInt(12);


                                        if (!selectedManager.setAlarm(isWakeupAlarm, setting)) {
                                            m_listener.onError(MitacEventListener.QiStatus.QI_STATUS_SET_ALARM, MitacEventListener.MitacError.MITACERROR_CHAR_DATA_FORMAT);
                                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                            resetCurID();
                                            popQueue();
                                        }
                                    } catch (JSONException exception) {
                                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                        resetCurID();
                                        popQueue();
                                    }
                                }
                            }, delay, TimeUnit.MILLISECONDS);

                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                        resetCurID();
                        popQueue();
                        return false;
                    }
                    break;
                case WRISTBANDFUNC_SET_GOAL:
                    try {
                        JSONObject obj2 = new JSONObject(payload);
                        final JSONArray arr = obj2.getJSONArray("param");
                        if (arr.length() != 4) {
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        } else {
                            m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_SET_GOAL);
                            scheduler.schedule(new Runnable() {
                                public void run() {
                                    try {
                                        int ActivityTime = arr.getInt(0);
                                        int Steps = arr.getInt(1);
                                        int Distance = arr.getInt(2);
                                        int Calories = arr.getInt(3);

                                        if (!selectedManager.setGoal(ActivityTime, Steps, Distance, Calories)) {
                                            m_listener.onError(MitacEventListener.QiStatus.QI_STATUS_SET_GOAL, MitacEventListener.MitacError.MITACERROR_CHAR_DATA_FORMAT);
                                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                            curActionID = null;
                                            popQueue();
                                        }
                                    } catch (JSONException exception) {
                                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                        resetCurID();
                                        popQueue();
                                    }
                                    resumeTimer();
                                }
                            }, delay, TimeUnit.MILLISECONDS);


                        }


                    } catch (JSONException e) {
                        e.printStackTrace();
                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                        resetCurID();
                        popQueue();
                        return false;
                    }
                    break;
                case WRISTBANDFUNC_GET_GOAL:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_GOAL);

                    scheduler.schedule(new Runnable() {
                        public void run() {

                            selectedManager.getGoal();
                            resumeTimer();
                        }
                    }, delay, TimeUnit.MILLISECONDS);

                    break;

                case WRISTBANDFUNC_GET_SERIAL_NO:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_SERIAL_NO);
                    scheduler.schedule(new Runnable() {
                        public void run() {

                            selectedManager.getSerial();
                            resumeTimer();
                        }
                    }, delay, TimeUnit.MILLISECONDS);


                    break;

                case WRISTBANDFUNC_SET_TIME:
                    try {
                        JSONObject obj2 = new JSONObject(payload);
                        final JSONArray arr = obj2.getJSONArray("param");
                        if (arr.length() != 3) {
                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                            resetCurID();
                            popQueue();
                            return false;
                        } else {


                            String datestr = arr.getString(0);
                            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                            final Date date;
                            try {
                                date = format.parse(datestr);

                            } catch (ParseException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                                Log.e("ble", "set time format error");
                                selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                resetCurID();
                                popQueue();
                                return false;
                            }
                            m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_SET_TIME);


                            scheduler.schedule(new Runnable() {
                                public void run() {
                                    try {

                                        if (!selectedManager.setDate(date, TimeZone.getDefault(), arr.getBoolean(1), arr.getBoolean(2))) {
                                            m_listener.onError(MitacEventListener.QiStatus.QI_STATUS_SET_DATE, MitacEventListener.MitacError.MITACERROR_CHAR_DATA_FORMAT);
                                            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                            resetCurID();
                                            popQueue();
                                        }
                                    } catch (JSONException exception) {
                                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                                        resetCurID();
                                        popQueue();
                                    }
                                    resumeTimer();
                                }
                            }, delay, TimeUnit.MILLISECONDS);


                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                        selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                        resetCurID();
                        popQueue();
                        return false;
                    }
                    break;
                case WRISTBANDFUNC_GET_TIME:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_TIME);
                    scheduler.schedule(new Runnable() {
                        public void run() {

                            selectedManager.getDate();

                            resumeTimer();
                        }
                    }, delay, TimeUnit.MILLISECONDS);


                    break;
                case WRISTBANDFUNC_START_OTA:
                    m_listener.onStartQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_OTA);
                    scheduler.schedule(new Runnable() {
                        public void run() {
                            selectedManager.switchOTAMode();
                            m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_OTA);
                            resumeTimer();
                        }
                    }, delay, TimeUnit.MILLISECONDS);


                    break;
            }


        } catch (JSONException e) {
            e.printStackTrace();
            selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
            resetCurID();
            popQueue();
            return false;
        }

        return false;

    }

    public void initWithDevice(Context context) {


        queue = new ArrayList<String>();
        // mhandler = new Handler(context.getMainLooper());
        payloadOBJ = new JSONObject();
        actionTimer = new Timer();
        int pendingTime = 0;
        // final int curActionID = 0;
        startWatchTime = new Date();


        selectedManager = MitacManager.getInstance(context);


        if (selectedManager == null) {
               Log.e("ble", "ble fail");
            return;
        }

        //   txt.append("StartScan\n");
        // selectedManager.startScan(0);

        startTimer();
        selectedManager.addEventListener(new MitacEventListener() {


            @Override
            public void onConnected() {
                selectedManager.stopScan();
                selectedManager.startServiceDiscovery();
/*
                    runOnUiThread(new Runnable() {
                        public void run() {
                            txt.append("Connected\n");

                        }});
                        */
            }


            @Override
            public void onDisconnect() {

                //  runOnUiThread(new Runnable() {
                //     public void run() {

                Log.i("ble", "on disconnected");
                // try {
                //     Thread.sleep(3000);
                // selectedManager.startScan(0);
                //  } catch (InterruptedException e) {
                //     e.printStackTrace();
                // }
                //    }
                // });
                m_listener.onFinishQueueProcess("", WristbandFunc.WRISTBANDFUNC_DISCONNECT);
                m_listener.onDisconnect();

            }

            @Override
            public void onGetOTAMode(Boolean isOTAMode) {
                m_listener.onGetOTAMode(isOTAMode);

                if (curActionID == WristbandFunc.WRISTBANDFUNC_GET_OTA_MODE) {
                    m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_OTA_MODE);
                }

                resetCurID();
                popQueue();
            }

            @Override
            public void onConnecting() {
/*
                    runOnUiThread(new Runnable() {
                        public void run() {
                            txt.append("Connecting\n");

                        }
                    });
*/
                m_listener.onConnecting();
            }

            @Override
            public void onDeviceFound(BluetoothDevice device, int rssi, String localname) {
                m_listener.onDeviceFound(device, rssi, localname);
            }

            @Override
            public void onGetAlarm(boolean isWakeupAlarm, MitacManager.AlarmSetting setting) {
                m_listener.onGetAlarm(isWakeupAlarm, setting);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_ALARM);
                resetCurID();
                popQueue();
            }

            @Override
            public void onGetBatteryLevel(boolean isDischarging, MitacManager.BATTERY_LEVEL batterylvl) {
                m_listener.onGetBatteryLevel(isDischarging, batterylvl);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_BATTERY_LEVEL);
                resetCurID();
                popQueue();
            }

            @Override
            public void onRealtimeStepStop() {
                resetCurID();
                popQueue();
            }

            @Override
            public void onGetStepMeasureMode(Boolean isBeltMode) {
                m_listener.onGetStepMeasureMode(isBeltMode);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_STEP_MEASURE_MODE);
                resetCurID();
                popQueue();
            }

            @Override
            public void onSetStepMeasureMode(Boolean isBeltMode) {
                m_listener.onSetStepMeasureMode(isBeltMode);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_SET_STEP_MEASURE_MODE);
                resetCurID();
                popQueue();
            }

            @Override
            public void onGetFirmwareVersion(String strVersion) {
                m_listener.onGetFirmwareVersion(strVersion);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_FIRMWARE_VERSION);
                resetCurID();
                popQueue();
            }

            @Override
            public void onGetGoal(int steps, int calories, int distance, int runtime) {
                m_listener.onGetGoal(steps, calories, distance, runtime);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_GOAL);
                resetCurID();
                popQueue();
            }

            @Override
            public void onGetMacAddress(String strMAC) {
                m_listener.onGetMacAddress(strMAC);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_MAC_ADDRESS);
                resetCurID();
                popQueue();
            }

            @Override
            public void onGetProfile(MitacManager.userProfile profile) {
                m_listener.onGetProfile(profile);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_PROFILE);

                resetCurID();
                popQueue();

            }

            @Override
            public void onGetTime(Date date, TimeZone timezone, boolean bIs12hrMode) {
                m_listener.onGetTime(date, timezone, bIs12hrMode);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_TIME);
                resetCurID();
                popQueue();
            }

            @Override
            public void onSetAlarm(boolean isWakeupAlarm, boolean isSuccess) {
                m_listener.onSetAlarm(isWakeupAlarm, isSuccess);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_SET_ALARM);
                resetCurID();
                popQueue();
            }

            @Override
            public void onSetGoal(boolean isSuccess) {
                m_listener.onSetGoal(isSuccess);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_SET_GOAL);
                resetCurID();
                popQueue();
            }

            @Override
            public void onSetProfile(boolean isSuccess) {

                m_listener.onSetProfile(isSuccess);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_SET_PROFILE);
                resetCurID();
                popQueue();
            }


            @Override
            public void onGetSerial(String serial) {

                m_listener.onGetSerial(serial);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_SERIAL_NO);
                resetCurID();
                popQueue();
            }

            @Override
            public void onSetDistanceUnit() {

                m_listener.onSetDistanceUnit();
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_SET_DISTANCE_UNIT);
                resetCurID();
                popQueue();
            }

            @Override
            public void onSetSerial(boolean isSuccess) {

                m_listener.onSetSerial(isSuccess);
                m_listener.onFinishQueueProcess(curProcessID, curActionID);
                resetCurID();
                popQueue();
            }

            @Override
            public void onFlashDataErased(boolean isSuccess) {
                m_listener.onFlashDataErased(isSuccess);
                m_listener.onFinishQueueProcess(curProcessID, curActionID);
                resetCurID();
                popQueue();
            }

            @Override
            public void onGetDistanceUnit(MitacManager.DISTANCE_UNIT unit) {
                m_listener.onGetDistanceUnit(unit);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_DISTANCE_UNIT);
                resetCurID();
                popQueue();
            }

            @Override
            public void onGetRamSize(MitacManager.RAMSIZE ramsize) {
                m_listener.onGetRamSize(ramsize);
                m_listener.onFinishQueueProcess(curProcessID, curActionID);
                resetCurID();
                popQueue();
            }

            @Override
            public void onGetSleepMode(boolean isSleepMode) {
                m_listener.onGetSleepMode(isSleepMode);
                m_listener.onFinishQueueProcess(curProcessID, curActionID);
                resetCurID();
                popQueue();
            }

            @Override
            public void onSetTime(boolean isSuccess, boolean isSetTimeResetCount) {

                m_listener.onSetTime(isSuccess, isSetTimeResetCount);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_SET_TIME);
                resetCurID();
                popQueue();
            }

            @Override
            public void on7daysStepDataStart() {

                m_listener.on7daysStepDataStart();

            }

            @Override
            public void on7daysStepDataReceived(final ArrayList<StepHistory> stepRecords) {

                m_listener.on7daysStepDataReceived(stepRecords);
/*
                    runOnUiThread(new Runnable() {
                        public void run() {
                            for (int j = 0; j < stepRecords.size(); j++) {
                                final StepHistory history = stepRecords.get(j);

                                Log.d("ble", history.toString());
                            }
                        }
                    });
*/
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_REQUEST_STEP_HISTORY);
                resetCurID();
                popQueue();

            }

            @Override
            public void onSleepDataReceived(ArrayList<SleepHistory> sleepRecords) {

                m_listener.onSleepDataReceived(sleepRecords);
/*
                    for (int j = 0; j < sleepRecords.size(); j++) {
                        SleepHistory history = sleepRecord`s.get(j);
                        Log.d("ble", history.toString());
                    }
*/
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_REQUEST_SLEEP_HISTORY);
                resetCurID();
                popQueue();
            }

            @Override
            public void onSleepDataStop() {
                m_listener.onSleepDataStop();
                resetCurID();
                popQueue();
            }

            @Override
            public void on7daysStepDataStop() {
                m_listener.on7daysStepDataStop();
                //TODO: check whether remove below has impact
                resetCurID();
                popQueue();
            }

            @Override
            public void onHistoryFeatureDiscovered() {
                m_listener.onHistoryFeatureDiscovered();
            }

            @Override
            public void onHistoryFeatureSubscribed() {
                m_listener.onHistoryFeatureSubscribed();
            }

            @Override
            public void on7DaysStepFeatureDiscovered() {
                m_listener.on7DaysStepFeatureDiscovered();
            }

            @Override
            public void on7DaysStepFeatureSubscribed() {
                // remark: remember to stop realtime step count before getting 7 days
                m_listener.on7DaysStepFeatureSubscribed();

            }

            @Override
            public void onHandShaked() {

                m_listener.onHandShaked();

                resetCurID();
                popQueue();


            }

            @Override
            public void onEKGFeatureDiscovered() {
                m_listener.onEKGFeatureDiscovered();
            }

            @Override
            public void onEKGFeatureSubscribed() {
                m_listener.onEKGFeatureSubscribed();
            }


            @Override
            public void onCommandPointFeatureDiscovered() {
                m_listener.onCommandPointFeatureDiscovered();
            }

            @Override
            public void onCommandPointFeatureSubscribed() {
                m_listener.onCommandPointFeatureSubscribed();
            }


            @Override
            public void onDeviceFound(final BluetoothDevice device, final int rssi) {

                //run on ui thread is workaround for samsung device
                //    runOnUiThread(new Runnable() {
                //       public void run() {
                m_listener.onDeviceFound(device, rssi);


                //     }
                //  });
            }

            @Override
            public void onOTADetected() {

                m_listener.onOTADetected();

                //   runOnUiThread(new Runnable() {
                //      public void run() {

                selectedManager.stopScan();
                Log.d("ble", "OTA Mode Detected");
                // search for firmware file


                //  }});
            }

            @Override
            public void onOTAUpdateEnd() {

                m_listener.onOTAUpdateEnd();
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_OTA);
                resetCurID();

            }

            @Override
            public void onOTAUpdateProgress(int progress) {
                m_listener.onOTAUpdateProgress(progress);
            }

            @Override
            public void onEKGStop() {

                popQueue();

                resetCurID();
                m_listener.onEKGStop();
            }

            @Override
            public void onRawCPCEKGReceived(MitacCPCEKG data) {
                selectedManager.setStatus(QiStatus.QI_STATUS_START_CPC_EKG);
                if (selectedManager.getStatus() == QiStatus.QI_STATUS_START_CPC_EKG) {

                    m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_CPC);
                }
                m_listener.onRawCPCEKGReceived(data);
            }


            @Override
            public void onFinalCPCEKGReceived(MitacCPCEKG data) {
                m_listener.onFinalCPCEKGReceived(data);
//                    resetCurID();
//                    popQueue();
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_STOP_EKG);
                selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                resumeTimer();
                resetCurID();
                popQueue();

            }


            @Override
            public void onRawHRVEKGReceived(MitacHRVEKG data) {

                selectedManager.setStatus(QiStatus.QI_STATUS_START_HRV_EKG);
                if (selectedManager.getStatus() == QiStatus.QI_STATUS_START_HRV_EKG) {

                    m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_START_HRV);
                }

                m_listener.onRawHRVEKGReceived(data);
            }

            @Override
            public void onFinalHRVEKGReceived(MitacHRVEKG data) {

                m_listener.onFinalHRVEKGReceived(data);
//                    resetCurID();
//                    popQueue();
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_STOP_EKG);
                selectedManager.setStatus(MitacEventListener.QiStatus.QI_STATUS_READY);
                resumeTimer();
                resetCurID();
                popQueue();
            }

            @Override
            public void onGetFactoryUUID(String strFactoryUUID) {
                m_listener.onGetFactoryUUID(strFactoryUUID);
                m_listener.onFinishQueueProcess(curProcessID, WristbandFunc.WRISTBANDFUNC_GET_FACTORY_UUID);
                resetCurID();
                popQueue();
            }

            @Override
            public void onMitacServiceDiscovered() {

                m_listener.onMitacServiceDiscovered();

                //   runOnUiThread(new Runnable() {
                //      public void run() {
                selectedManager.ScanForServices();

                //    }
                // });

            }


            @Override
            public void onRealtimeStepFeatureDiscovered() {
                m_listener.onRealtimeStepFeatureDiscovered();

            }

            @Override
            public void onRealtimeStepEventSubscribed() {
                m_listener.onRealtimeStepEventSubscribed();
                //   mgr.startRealtimeStepCount();

            }

            @Override
            public void onGetRealtimeStep(StepHistory history) {
                m_listener.onGetRealtimeStep(history);
                //   Log.i("ble", "Steps:" + step);
            }

            @Override
            public void onError(MitacEventListener.QiStatus status, MitacEventListener.MitacError err) {


                m_listener.onError(status, err);
                if (!err.equals(MitacEventListener.MitacError.MITACERROR_EKG_DEVICE_FAIL) &&
                        !err.equals(MitacEventListener.MitacError.MITACERROR_EKG_ERROR_RESULT)
                        ) {
                    selectedManager.setStatus(QiStatus.QI_STATUS_READY);
                    resetCurID();
                    popQueue();
                } else if (err.equals(MitacEventListener.MitacError.MITACERROR_EKG_ERROR_RESULT)) {
                    selectedManager.stopEKG();
                }

            }


        });


    }


}
